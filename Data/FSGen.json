{"choices": [{"finish_reason": "stop", "index": 0, "logprobs": null, "references": [], "text": "Write a dot file for a flowscript language implementation. The dot file should be parsed by my program, jobsystem, to control the rest of the program with the following elements in each line:\n\n1. Job System Setup: printing out function StartorGetJobSystem, CreateWorkerThread (at least 2 times for multithreading), with a \"->\" following the function name indicating execution\n\n2. Jobs Setup: 1) RegisterJobType following a \"->\" and then the types of jobs: CompileJob, ParseJob, OutputJob, CustomJob, LLMJob, each followed by \"\\n\" and surround the list in qutation as one string\n\n2) ListJobs followed by a \"->\" to display the jobs just registered \n\n3) CreateJob followed by a \"->\" and a job in the registred job types. One job a line until the every job in the list is created. \n\n4) CompileJob followed by a \"->\" and ParseJob and [style=bold,label=\"Link\"] to implement dependency; \n\nParseJob followed by a \"->\" and OutputJob and [style=bold,label=\"Link\"] to implement dependency. \n\n3. UI: label=\"UI while loop->\" to invoke the user interface to control job system. \n\nNote: Make sure that each line has only one function, and there is always a \"->\" after the function name.\n\nTo make sure parse can read your generated file, ensure proper styling as described above by the order the rules mentioned. Here are some example for syntax: \n\nGeneric syntactical format: \n\n```dot\n\nFunctionOne->\n\nFunctionTwo->\n\nFunctionJob->ExampleJob\n\nExampleJob->AnotherExampleJob[style=bold,label=\"Link\"]\n\nlabel=\"UI while loop->\"\n\n```\n\nFor JobSystem creation: \n\n```dot\n\nStartorGetJobSystem->\n\nCreateWorkerThread->\n\nCreateWorkerThread->\n\nCreateWorkerThread-> \n\n```\n\nFor creating jobs:\n\n```dot\n\nRegisterJobType->\"CompileJob\\nParseJob\\nOutputJob\\nCustomJob\\nLLMJob\\n\"\n\nListJobs->\n\nCreateJob->CompileJob\n\nCreateJob->ParseJob\n\nCreateJob->OutputJob \n\n```\n\nFor linking jobs: \n\n```dot\n\nCompileJob->ParseJob[style=bold,label=\"Link\"]\n\nParseJob->OutputJob[style=bold,label=\"Link\"] \n\n```\n\nFor initiating UI:\n\n```dot\n\nlabel=\"UI while loop->\" \n\n```\n\nNow, generate the dot file for my program to parse. Remember to follow all above instructions&\nStartorGetJobSystem->\n CreateWorkerThread->\n CreateWorkerThread->\n CreateWorkerThread->\n\nRegisterJobType->\"CompileJob\\nParseJob\\nOutputJob\\nCustomJob\\nLLMJob\\n\"\n ListJobs->\n CompileJob->ParseJob[style=bold,label=\"Link\"]\n ParseJob->OutputJob[style=bold,label=\"Link\"]\n CreateJob->CompileJob\n CreateJob->ParseJob\n CreateJob->OutputJob\n label=\"UI while loop->\""}], "created": 1702152522, "id": "foobarbaz", "model": "Mistral OpenOrca", "object": "text_completion", "usage": {"completion_tokens": 114, "prompt_tokens": 632, "total_tokens": 746}}